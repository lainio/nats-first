// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: in.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InServiceClient is the client API for InService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InServiceClient interface {
	ListenCmd(ctx context.Context, in *Cmd, opts ...grpc.CallOption) (InService_ListenCmdClient, error)
	EnterCmd(ctx context.Context, in *Cmd, opts ...grpc.CallOption) (*CmdStatus, error)
}

type inServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInServiceClient(cc grpc.ClientConnInterface) InServiceClient {
	return &inServiceClient{cc}
}

func (c *inServiceClient) ListenCmd(ctx context.Context, in *Cmd, opts ...grpc.CallOption) (InService_ListenCmdClient, error) {
	stream, err := c.cc.NewStream(ctx, &InService_ServiceDesc.Streams[0], "/in.v1.InService/ListenCmd", opts...)
	if err != nil {
		return nil, err
	}
	x := &inServiceListenCmdClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InService_ListenCmdClient interface {
	Recv() (*CmdStatus, error)
	grpc.ClientStream
}

type inServiceListenCmdClient struct {
	grpc.ClientStream
}

func (x *inServiceListenCmdClient) Recv() (*CmdStatus, error) {
	m := new(CmdStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *inServiceClient) EnterCmd(ctx context.Context, in *Cmd, opts ...grpc.CallOption) (*CmdStatus, error) {
	out := new(CmdStatus)
	err := c.cc.Invoke(ctx, "/in.v1.InService/EnterCmd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InServiceServer is the server API for InService service.
// All implementations must embed UnimplementedInServiceServer
// for forward compatibility
type InServiceServer interface {
	ListenCmd(*Cmd, InService_ListenCmdServer) error
	EnterCmd(context.Context, *Cmd) (*CmdStatus, error)
	mustEmbedUnimplementedInServiceServer()
}

// UnimplementedInServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInServiceServer struct {
}

func (UnimplementedInServiceServer) ListenCmd(*Cmd, InService_ListenCmdServer) error {
	return status.Errorf(codes.Unimplemented, "method ListenCmd not implemented")
}
func (UnimplementedInServiceServer) EnterCmd(context.Context, *Cmd) (*CmdStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnterCmd not implemented")
}
func (UnimplementedInServiceServer) mustEmbedUnimplementedInServiceServer() {}

// UnsafeInServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InServiceServer will
// result in compilation errors.
type UnsafeInServiceServer interface {
	mustEmbedUnimplementedInServiceServer()
}

func RegisterInServiceServer(s grpc.ServiceRegistrar, srv InServiceServer) {
	s.RegisterService(&InService_ServiceDesc, srv)
}

func _InService_ListenCmd_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Cmd)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InServiceServer).ListenCmd(m, &inServiceListenCmdServer{stream})
}

type InService_ListenCmdServer interface {
	Send(*CmdStatus) error
	grpc.ServerStream
}

type inServiceListenCmdServer struct {
	grpc.ServerStream
}

func (x *inServiceListenCmdServer) Send(m *CmdStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _InService_EnterCmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cmd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InServiceServer).EnterCmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/in.v1.InService/EnterCmd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InServiceServer).EnterCmd(ctx, req.(*Cmd))
	}
	return interceptor(ctx, in, info, handler)
}

// InService_ServiceDesc is the grpc.ServiceDesc for InService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "in.v1.InService",
	HandlerType: (*InServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnterCmd",
			Handler:    _InService_EnterCmd_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListenCmd",
			Handler:       _InService_ListenCmd_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "in.proto",
}
